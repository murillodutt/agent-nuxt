# Agent Nuxt - Pipeline CI/CD
# Data: 21/09/2025 10:30:45 (America/Sao_Paulo)
# Autor: Murillo Dutt - Dutt eCommerce Website Design

name: CI/CD Pipeline - Agent Nuxt

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  AGENT_OS_VERSION: '2.1.0'

jobs:
  # ========================
  # QUALITY ASSURANCE
  # ========================
  quality-check:
    name: Quality Assurance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
      
      - name: Install Dependencies
        run: |
          echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [INFO] Installing dependencies..."
          npm ci --prefer-offline --no-audit
      
      - name: Validate Agent OS Structure
        run: |
          echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [INFO] Validating Agent OS structure..."
          
          # Verificar estrutura obrigatória
          test -d .agent-os || { echo "ERROR: .agent-os directory missing"; exit 1; }
          test -d .agent-os/standards || { echo "ERROR: .agent-os/standards missing"; exit 1; }
          test -d .agent-os/product || { echo "ERROR: .agent-os/product missing"; exit 1; }
          test -d .agent-os/specs || { echo "ERROR: .agent-os/specs missing"; exit 1; }
          
          # Verificar arquivos essenciais
          test -f .agent-os/product/mission.md || { echo "ERROR: mission.md missing"; exit 1; }
          test -f .agent-os/product/tech-stack.md || { echo "ERROR: tech-stack.md missing"; exit 1; }
          
          echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [SUCCESS] Agent OS structure validated"
      
      - name: Lint Documentation
        run: |
          echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [INFO] Linting documentation..."
          
          # Verificar arquivos Markdown
          find . -name "*.md" -not -path "./node_modules/*" | while read -r file; do
            echo "Checking $file..."
            # Verificar se arquivo não está vazio
            test -s "$file" || { echo "ERROR: $file is empty"; exit 1; }
            # Verificar encoding UTF-8
            file -bi "$file" | grep -q "utf-8" || { echo "WARNING: $file may not be UTF-8"; }
          done
          
          echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [SUCCESS] Documentation linting completed"
      
      - name: Validate Timestamps
        run: |
          echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [INFO] Validating timestamp patterns..."
          
          # Verificar padrão de timestamp brasileiro
          if ! grep -r "América/Sao_Paulo\|America/Sao_Paulo" .agent-os/ --include="*.md" --include="*.ts" --include="*.js"; then
            echo "WARNING: No Brazilian timestamp patterns found"
          fi
          
          # Verificar formato de data DD/MM/YYYY
          if grep -r "[0-9]\{2\}/[0-9]\{2\}/[0-9]\{4\}" .agent-os/ --include="*.md" --include="*.ts" --include="*.js"; then
            echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [SUCCESS] Brazilian date format found"
          fi

  # ========================
  # SECURITY SCAN
  # ========================
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Check for Secrets
        run: |
          echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [INFO] Scanning for secrets..."
          
          # Verificar padrões de segredos
          if grep -r "password\|secret\|key\|token" . --include="*.md" --include="*.json" --include="*.yml" --exclude-dir=node_modules --exclude-dir=.git; then
            echo "WARNING: Potential secrets found in files"
          fi
          
          # Verificar arquivos .env
          if find . -name ".env*" -not -path "./node_modules/*"; then
            echo "WARNING: Environment files found"
          fi
          
          echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [SUCCESS] Security scan completed"

  # ========================
  # ACCESSIBILITY CHECK
  # ========================
  accessibility-check:
    name: Accessibility Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Validate WCAG Compliance
        run: |
          echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [INFO] Validating WCAG 2.1 AA compliance..."
          
          # Verificar menções de WCAG
          if ! grep -r "WCAG 2.1 AA" .agent-os/ --include="*.md"; then
            echo "ERROR: WCAG 2.1 AA compliance not documented"
            exit 1
          fi
          
          # Verificar padrões de acessibilidade
          if grep -r "aria-label\|aria-describedby\|role=" .agent-os/ --include="*.md" --include="*.vue"; then
            echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [SUCCESS] Accessibility patterns found"
          fi
          
          echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [SUCCESS] Accessibility validation completed"

  # ========================
  # PERFORMANCE CHECK
  # ========================
  performance-check:
    name: Performance Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Validate Performance Standards
        run: |
          echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [INFO] Validating performance standards..."
          
          # Verificar métricas de performance documentadas
          if ! grep -r "Lighthouse.*95" .agent-os/ --include="*.md"; then
            echo "WARNING: Lighthouse 95+ target not documented"
          fi
          
          # Verificar Core Web Vitals
          if grep -r "LCP\|FID\|CLS" .agent-os/ --include="*.md"; then
            echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [SUCCESS] Core Web Vitals documented"
          fi
          
          echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [SUCCESS] Performance validation completed"

  # ========================
  # DOCUMENTATION BUILD
  # ========================
  documentation-build:
    name: Documentation Build Test
    runs-on: ubuntu-latest
    needs: [quality-check]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Test Documentation Generation
        run: |
          echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [INFO] Testing documentation generation..."
          
          # Verificar se todos os arquivos MD são válidos
          find . -name "*.md" -not -path "./node_modules/*" | while read -r file; do
            echo "Processing $file..."
            
            # Verificar se arquivo tem conteúdo
            if [ ! -s "$file" ]; then
              echo "ERROR: $file is empty"
              exit 1
            fi
            
            # Verificar estrutura básica
            if ! head -1 "$file" | grep -q "^#"; then
              echo "WARNING: $file may be missing main heading"
            fi
          done
          
          echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [SUCCESS] Documentation build test completed"

  # ========================
  # AGENT OS VALIDATION
  # ========================
  agent-os-validation:
    name: Agent OS Conformance
    runs-on: ubuntu-latest
    needs: [quality-check]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Validate Agent OS Conformance
        run: |
          echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [INFO] Validating Agent OS conformance..."
          
          # Verificar versão do Agent OS
          if grep -r "Agent OS.*2.1.0" . --include="*.md"; then
            echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [SUCCESS] Agent OS v2.1.0 version found"
          else
            echo "WARNING: Agent OS version not clearly specified"
          fi
          
          # Verificar três camadas
          if [ -d ".agent-os/standards" ] && [ -d ".agent-os/product" ] && [ -d ".agent-os/specs" ]; then
            echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [SUCCESS] Three-layer architecture validated"
          else
            echo "ERROR: Three-layer architecture incomplete"
            exit 1
          fi
          
          # Verificar Nuxt 4.x integration
          if grep -r "Nuxt.*4" .agent-os/ --include="*.md"; then
            echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [SUCCESS] Nuxt 4.x integration documented"
          else
            echo "ERROR: Nuxt 4.x integration not documented"
            exit 1
          fi
          
          echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [SUCCESS] Agent OS conformance validated"

  # ========================
  # FINAL VALIDATION
  # ========================
  final-validation:
    name: Final Validation
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan, accessibility-check, performance-check, documentation-build, agent-os-validation]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Generate Validation Report
        run: |
          echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [INFO] Generating final validation report..."
          
          cat << EOF > validation-report.md
          # Agent Nuxt - Validation Report
          
          **Date:** $(date '+%d/%m/%Y %H:%M:%S') (America/Sao_Paulo)
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          
          ## Validation Results
          
          - ✅ Quality Assurance: PASSED
          - ✅ Security Scan: PASSED  
          - ✅ Accessibility Check: PASSED
          - ✅ Performance Validation: PASSED
          - ✅ Documentation Build: PASSED
          - ✅ Agent OS Conformance: PASSED
          
          ## Summary
          
          All validation checks passed successfully. The Agent Nuxt system is ready for deployment.
          
          **Status:** ✅ VALIDATED
          **Agent OS Version:** 2.1.0
          **Nuxt Version:** 4.x
          **WCAG Compliance:** 2.1 AA
          EOF
          
          echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [SUCCESS] Final validation completed"
      
      - name: Upload Validation Report
        uses: actions/upload-artifact@v3
        with:
          name: validation-report
          path: validation-report.md
          retention-days: 30

  # ========================
  # NOTIFICATION
  # ========================
  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [final-validation]
    if: always()
    
    steps:
      - name: Notify Success
        if: needs.final-validation.result == 'success'
        run: |
          echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [SUCCESS] ✅ Agent Nuxt CI/CD Pipeline completed successfully"
          echo "All quality gates passed. System ready for production."
      
      - name: Notify Failure
        if: needs.final-validation.result != 'success'
        run: |
          echo "[$(date '+%d/%m/%Y %H:%M:%S')] [CI] [ERROR] ❌ Agent Nuxt CI/CD Pipeline failed"
          echo "Please check the logs and fix any issues before proceeding."
          exit 1
