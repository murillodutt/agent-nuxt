================
CODE SNIPPETS
================
TITLE: Getting Started Section Links
DESCRIPTION: This snippet defines a list of navigation links for the 'Getting started' section. It includes links to 'Installation', 'Editor setup', 'Compatibility', and 'Upgrade guide', each with a title and path.

SOURCE: https://tailwindcss.com/docs/responsive-design

LANGUAGE: javascript
CODE:
```
{
  "className": "-ml-px flex flex-col items-start gap-2",
  "children": [
    {
      "title": "Installation",
      "path": "/docs/installation"
    },
    false
  ]
}
```

LANGUAGE: javascript
CODE:
```
{
  "className": "-ml-px flex flex-col items-start gap-2",
  "children": [
    {
      "title": "Editor setup",
      "path": "/docs/editor-setup"
    },
    false
  ]
}
```

LANGUAGE: javascript
CODE:
```
{
  "className": "-ml-px flex flex-col items-start gap-2",
  "children": [
    {
      "title": "Compatibility",
      "path": "/docs/compatibility"
    },
    false
  ]
}
```

LANGUAGE: javascript
CODE:
```
{
  "className": "-ml-px flex flex-col items-start gap-2",
  "children": [
    {
      "title": "Upgrade guide",
      "path": "/docs/upgrade-guide"
    },
    false
  ]
}
```

--------------------------------

TITLE: Starting a Claude Code Session in a Project Directory
DESCRIPTION: This example shows how to navigate to a project directory and initiate an interactive Claude Code session. Once logged in, the `claude` command starts the AI assistant within your project context.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: shell
CODE:
```
cd /path/to/your/project
claude
```

--------------------------------

TITLE: Claude Code - Quickstart
DESCRIPTION: A quickstart guide to begin using Claude Code.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: APIDOC
CODE:
```
## Claude Code Quickstart

### Description
Welcome to Claude Code!
```

--------------------------------

TITLE: Update Documentation with Claude
DESCRIPTION: Guides Claude to update project documentation, specifically the README file with installation instructions. This is crucial for project maintainability.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: text
CODE:
```
> update the README with installation instructions
```

--------------------------------

TITLE: Getting Started Section
DESCRIPTION: Renders a 'Getting Started' section with a list of links to documentation pages like installation, editor setup, compatibility, and upgrade guide. This section helps new users quickly find essential information.

SOURCE: https://tailwindcss.com/docs/flex-basis

LANGUAGE: javascript
CODE:
```
function GettingStarted(props) {
  return (
    <div className='flex flex-col gap-3' data-autoscroll>
      <h3 className='font-mono text-sm/6 font-medium tracking-widest text-gray-500 uppercase sm:text-xs/6 dark:text-gray-400'>
        Getting started
      </h3>
      <ul className='flex flex-col gap-2 border-l dark:border-[color-mix(in_oklab,_var(--color-gray-950),white_20%)] border-[color-mix(in_oklab,_var(--color-gray-950),white_90%)]'>
        <li className='-ml-px flex flex-col items-start gap-2'>
          <a title='Installation' href='/docs/installation'>
            <svg
              viewBox='0 0 16 16'
              fill='none'
              className='size-5 sm:size-4'
            >
              <path
                data-outline
                d='M5.5 4.5h-3a2 2 0 00-2 2v4c0 1.1.9 2 2 2h1v3l3-3h2a2 2 0 002-2v-1m0 0l2 2v-3h1a2 2 0 002-2v-4a2 2 0 00-2-2h-6a2 2 0 00-2 2v4c0 1.1.9 2 2 2h2l1 1z'
                strokeLinejoin='round'
              />
              <path
                data-highlight
                d='M13.5 1c.83 0 1.5.67 1.5 1.5v4c0 .83-.67 1.5-1.5 1.5h-1a.5.5 0 00-.5.5v1.8L9.85 8.14A.5.5 0 009.5 8h-2A1.5 1.5 0 016 6.5v-4C6 1.67 6.67 1 7.5 1h6z'
              />
            </svg>
            <span>Installation</span>
          </a>
        </li>
        <li className='-ml-px flex flex-col items-start gap-2'>
          <a title='Editor setup' href='/docs/editor-setup'>
            <svg
              viewBox='0 0 16 16'
              fill='none'
              className='size-5 sm:size-4'
            >
              <path
                data-outline
                d='M5.5 4.5h-3a2 2 0 00-2 2v4c0 1.1.9 2 2 2h1v3l3-3h2a2 2 0 002-2v-1m0 0l2 2v-3h1a2 2 0 002-2v-4a2 2 0 00-2-2h-6a2 2 0 00-2 2v4c0 1.1.9 2 2 2h2l1 1z'
                strokeLinejoin='round'
              />
              <path
                data-highlight
                d='M13.5 1c.83 0 1.5.67 1.5 1.5v4c0 .83-.67 1.5-1.5 1.5h-1a.5.5 0 00-.5.5v1.8L9.85 8.14A.5.5 0 009.5 8h-2A1.5 1.5 0 016 6.5v-4C6 1.67 6.67 1 7.5 1h6z'
              />
            </svg>
            <span>Editor setup</span>
          </a>
        </li>
        <li className='-ml-px flex flex-col items-start gap-2'>
          <a title='Compatibility' href='/docs/compatibility'>
            <svg
              viewBox='0 0 16 16'
              fill='none'
              className='size-5 sm:size-4'
            >
              <path
                data-outline
                d='M5.5 4.5h-3a2 2 0 00-2 2v4c0 1.1.9 2 2 2h1v3l3-3h2a2 2 0 002-2v-1m0 0l2 2v-3h1a2 2 0 002-2v-4a2 2 0 00-2-2h-6a2 2 0 00-2 2v4c0 1.1.9 2 2 2h2l1 1z'
                strokeLinejoin='round'
              />
              <path
                data-highlight
                d='M13.5 1c.83 0 1.5.67 1.5 1.5v4c0 .83-.67 1.5-1.5 1.5h-1a.5.5 0 00-.5.5v1.8L9.85 8.14A.5.5 0 009.5 8h-2A1.5 1.5 0 016 6.5v-4C6 1.67 6.67 1 7.5 1h6z'
              />
            </svg>
            <span>Compatibility</span>
          </a>
        </li>
        <li className='-ml-px flex flex-col items-start gap-2'>
          <a title='Upgrade guide' href='/docs/upgrade-guide'>
            <svg
              viewBox='0 0 16 16'
              fill='none'
              className='size-5 sm:size-4'
            >
              <path
                data-outline
                d='M5.5 4.5h-3a2 2 0 00-2 2v4c0 1.1.9 2 2 2h1v3l3-3h2a2 2 0 002-2v-1m0 0l2 2v-3h1a2 2 0 002-2v-4a2 2 0 00-2-2h-6a2 2 0 00-2 2v4c0 1.1.9 2 2 2h2l1 1z'
                strokeLinejoin='round'
              />
              <path
                data-highlight
                d='M13.5 1c.83 0 1.5.67 1.5 1.5v4c0 .83-.67 1.5-1.5 1.5h-1a.5.5 0 00-.5.5v1.8L9.85 8.14A.5.5 0 009.5 8h-2A1.5 1.5 0 016 6.5v-4C6 1.67 6.67 1 7.5 1h6z'
              />
            </svg>
            <span>Upgrade guide</span>
          </a>
        </li>
      </ul>
    </div>
  );
}
```

--------------------------------

TITLE: UI Getting Started Section
DESCRIPTION: Organizes documentation links for getting started with the project, including installation, editor setup, compatibility, and upgrade guides.

SOURCE: https://tailwindcss.com/docs/breakpoints

LANGUAGE: javascript
CODE:
```
[
  "$",
  "div",
  "Getting started",
  {
    "className": "flex flex-col gap-3",
    "data-autoscroll": true,
    "children": [
      [
        "$",
        "h3",
        null,
        {
          "className": "font-mono text-sm/6 font-medium tracking-widest text-gray-500 uppercase sm:text-xs/6 dark:text-gray-400",
          "children": "Getting started"
        }
      ],
      [
        "$",
        "ul",
        null,
        {
          "className": "flex flex-col gap-2 border-l dark:border-[color-mix(in_oklab,_var(--color-gray-950),white_20%)] border-[color-mix(in_oklab,_var(--color-gray-950),white_90%)]",
          "children": [
            [
              "$",
              "li",
              "/docs/installation",
              {
                "className": "-ml-px flex flex-col items-start gap-2",
                "children": [
                  [
                    "$",
                    "$L1d",
                    null,
                    {
                      "title": "Installation",
                      "path": "/docs/installation"
                    }
                  ],
                  false
                ]
              }
            ],
            [
              "$",
              "li",
              "/docs/editor-setup",
              {
                "className": "-ml-px flex flex-col items-start gap-2",
                "children": [
                  [
                    "$",
                    "$L1d",
                    null,
                    {
                      "title": "Editor setup",
                      "path": "/docs/editor-setup"
                    }
                  ],
                  false
                ]
              }
            ],
            [
              "$",
              "li",
              "/docs/compatibility",
              {
                "className": "-ml-px flex flex-col items-start gap-2",
                "children": [
                  [
                    "$",
                    "$L1d",
                    null,
                    {
                      "title": "Compatibility",
                      "path": "/docs/compatibility"
                    }
                  ],
                  false
                ]
              }
            ],
            [
              "$",
              "li",
              "/docs/upgrade-guide",
              {
                "className": "-ml-px flex flex-col items-start gap-2",
                "children": [
                  [
                    "$",
                    "$L1d",
                    null,
                    {
                      "title": "Upgrade guide",
                      "path": "/docs/upgrade-guide"
                    }
                  ],
                  false
                ]
              }
            ]
          ]
        }
      ]
    ]
  }
]
```

--------------------------------

TITLE: Native Installation Script for Windows PowerShell
DESCRIPTION: This command installs Claude Code on Windows using PowerShell. It downloads the installation script from the provided URL and executes it using `Invoke-RestMethod` (aliased as `irm`).

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: powershell
CODE:
```
irm https://claude.ai/install.ps1 | iex
```

--------------------------------

TITLE: Install Claude Code (Native)
DESCRIPTION: This section details the native installation process for Claude Code. Specific commands may vary based on your operating system.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: bash
CODE:
```
Native Install
```

--------------------------------

TITLE: Support & Configuration - Getting Help
DESCRIPTION: Information on how to get technical support for Claude, the Claude API, and other Anthropic products.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: APIDOC
CODE:
```
## Getting Help

### Description
We've tried to provide the answers to the most common questions in these docs. However, if you need further technical support using Claude, the Claude API, or any of our products, you may reach our support team at [support.claude.com](https://support.claude.com).
```

--------------------------------

TITLE: Examples - Message Batches API
DESCRIPTION: Offers example usage for the Message Batches API.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: APIDOC
CODE:
```
## Message Batches API Examples

### Description
Example usage for the Message Batches API.
```

--------------------------------

TITLE: Example Claude Code Interactive Prompt (Text)
DESCRIPTION: This snippet shows the initial prompt displayed by Claude Code after a session is started, indicating a welcome message and an example of how to ask a question.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: text
CODE:
```
✻ Welcome to Claude Code!

...
> Try "create a util logging.py that..." 
```

--------------------------------

TITLE: Examples - Messages API
DESCRIPTION: Provides request and response examples for the Messages API.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: APIDOC
CODE:
```
## Messages API Examples

### Description
Request and response examples for the Messages API.
```

--------------------------------

TITLE: Native Installation for Windows CMD
DESCRIPTION: This sequence of commands installs Claude Code on Windows using the Command Prompt (CMD). It downloads the script using `curl`, saves it as `install.cmd`, executes it, and then removes the temporary script file.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: cmd
CODE:
```
curl -fsSL https://claude.ai/install.cmd -o install.cmd && install.cmd && del install.cmd
```

--------------------------------

TITLE: Example of Specific vs. Vague Requests
DESCRIPTION: Illustrates how to phrase requests to Claude for better outcomes. The first example is a vague request, while the second is specific and actionable.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: text
CODE:
```
> fix the bug
```

LANGUAGE: text
CODE:
```
> fix the login bug where users see a blank screen after entering wrong credentials
```

--------------------------------

TITLE: Native Installation Script for macOS, Linux, WSL
DESCRIPTION: This snippet provides the command to download and execute the Claude Code installation script for macOS, Linux, and Windows Subsystem for Linux (WSL) environments. It utilizes `curl` to fetch the script and pipes it to `bash` for execution.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: shell
CODE:
```
curl -fsSL https://claude.ai/install.sh | bash
```

--------------------------------

TITLE: Beginner Pro Tip: Step-by-Step Instructions (Part 2)
DESCRIPTION: Demonstrates the second step in providing step-by-step instructions for complex tasks. This example focuses on creating an API endpoint to manage user profiles.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: text
CODE:
```
> 2. create an API endpoint to get and update user profiles
```

--------------------------------

TITLE: Install Claude Code using NPM
DESCRIPTION: Installs the Claude Code package globally using npm. This command requires Node.js version 18 or newer to be installed on your system.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: bash
CODE:
```
npm install -g @anthropic-ai/claude-code
```

--------------------------------

TITLE: Beginner Pro Tip: Step-by-Step Instructions (Part 1)
DESCRIPTION: Demonstrates the first step in providing step-by-step instructions for complex tasks. This example focuses on creating a new database table for user profiles.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: text
CODE:
```
> 1. create a new database table for user profiles
```

--------------------------------

TITLE: Claude Code AI Task Examples
DESCRIPTION: Examples of prompts to instruct Claude Code to perform specific tasks like analyzing database schemas or building dashboards based on product return data.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: text
CODE:
```
> analyze the database schema
```

LANGUAGE: text
CODE:
```
> build a dashboard showing products that are most frequently returned by our UK customers
```

--------------------------------

TITLE: Install Claude Code Script (Windows CMD)
DESCRIPTION: This script downloads and executes the Claude Code installation command on Windows. It uses curl to fetch the script and then executes it, ensuring the installation completes successfully.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: bat
CODE:
```
curl -fsSL https://claude.ai/install.cmd -o install.cmd && install.cmd
```

--------------------------------

TITLE: Structuring Prompts for Claude Code
DESCRIPTION: Examples demonstrate how to provide clear and actionable instructions to Claude Code for better results. This includes being specific about bugs and breaking down complex tasks.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: markdown
CODE:
```
> fix the login bug where users see a blank screen after entering wrong credentials

```

LANGUAGE: markdown
CODE:
```
> 1. create a new database table for user profiles

```

LANGUAGE: markdown
CODE:
```
> 2. create an API endpoint to get and update user profiles

```

LANGUAGE: markdown
CODE:
```
> 3. build a webpage that allows users to see and edit their information

```

LANGUAGE: markdown
CODE:
```
> analyze the database schema

```

LANGUAGE: markdown
CODE:
```
> build a dashboard showing products that are most frequently returned by our UK customers

```

--------------------------------

TITLE: Install Claude Code using NPM
DESCRIPTION: This snippet shows how to install Claude Code using the Node Package Manager (NPM). It's a straightforward command for setting up the tool.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: bash
CODE:
```
npm install
```

--------------------------------

TITLE: Example Claude Code Prompts for Code Analysis
DESCRIPTION: These are example natural language prompts that can be used within a Claude Code session to understand a project's codebase. They cover general project overview, technology stack identification, entry point discovery, and folder structure explanation.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: text
CODE:
```
> what does this project do?
```

LANGUAGE: text
CODE:
```
> what technologies does this project use?
```

LANGUAGE: text
CODE:
```
> where is the main entry point?
```

LANGUAGE: text
CODE:
```
> explain the folder structure
```

--------------------------------

TITLE: Navigation Link to Installation Docs
DESCRIPTION: A navigation link pointing to the 'Installation' documentation page. This is a primary link for new users to get started with the project setup.

SOURCE: https://tailwindcss.com/docs/flex-basis

LANGUAGE: html
CODE:
```
<a href="/docs/installation">Installation</a>
```

--------------------------------

TITLE: Install Claude Code (Native Install)
DESCRIPTION: This snippet shows how to install Claude Code natively on macOS, Linux, or WSL.  This method may offer better performance or integration with the operating system.  It is currently in beta.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: shellscript
CODE:
```
curl -O https://storage.googleapis.com/claude-code/claude-code-beta-latest-x86_64.tar.gz
```

LANGUAGE: shellscript
CODE:
```
tar -xvzf claude-code-beta-latest-x86_64.tar.gz
```

LANGUAGE: shellscript
CODE:
```
sudo mv claude-code /usr/local/bin
```

--------------------------------

TITLE: Example Claude Code Prompts for Self-Inquiry
DESCRIPTION: These prompts allow users to ask Claude Code about its own capabilities and usage. They cover general functionality, slash command usage, and compatibility with tools like Docker.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: text
CODE:
```
> what can Claude Code do?
```

LANGUAGE: text
CODE:
```
> how do I use slash commands in Claude Code?
```

LANGUAGE: text
CODE:
```
> can Claude Code work with Docker?
```

--------------------------------

TITLE: Beginner Pro Tip: Specific Requests
DESCRIPTION: This example illustrates the importance of being specific when making requests to Claude Code. It contrasts a vague request with a detailed one, showing how specificity leads to better results.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: text
CODE:
```
Instead of: “fix the bug”
Try: “fix the login bug where users see a blank screen after entering wrong credentials”
```

--------------------------------

TITLE: Combining Script Setup and Normal Script (Vue)
DESCRIPTION: Provides an example of using a normal script block alongside script setup in a Vue component. This is useful for declaring options not supported in script setup or for running module-scoped side effects.

SOURCE: https://vuejs.org/api/sfc-script-setup.html

LANGUAGE: vue
CODE:
```
<script>
// normal <script>, executed in module scope (only once)
runSideEffectOnce()

// declare additional options
export default {
  inheritAttrs: false,
  customOptions: {}
}
</script>

<script setup>
// executed in setup() scope (for each instance)
</script>
```

--------------------------------

TITLE: Login via Claude Console (Shell)
DESCRIPTION: This command specifically targets logging in through the Claude Console. Users will be guided through prompts to authenticate with their account, enabling API access with pre-paid credits. This is an alternative to using Claude.ai for login.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: shellscript
CODE:
```
/login
# Follow the prompts to log in with your account
```

--------------------------------

TITLE: Vue.js Composition API - setup()
DESCRIPTION: Details the `setup()` function within the Composition API, which is the entry point for component logic.

SOURCE: https://vuejs.org/api/sfc-script-setup.html

LANGUAGE: APIDOC
CODE:
```
## GET /api/composition-api-setup

### Description
Provides information and usage examples for the `setup()` function in Vue.js Composition API.

### Method
GET

### Endpoint
/api/composition-api-setup

### Parameters
N/A

### Request Example
N/A

### Response
#### Success Response (200)
- **documentation** (string) - Detailed explanation of the `setup()` function, its parameters, and return values.
- **examples** (array) - Code examples demonstrating the usage of `setup()`.

#### Response Example
{
  "documentation": "The setup() function is the entry point for Composition API logic. It is called before the component is mounted. It can return an object with properties and methods to be exposed to the template.",
  "examples": [
    {
      "description": "Basic setup function",
      "code": "<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>"
    },
    {
      "description": "Setup function returning values",
      "code": "<script>\nimport { ref } from 'vue'\nexport default {
  setup() {
    const count = ref(0)
    return {
      count
    }
  }
}
</script>"
    }
  ]
}
```

--------------------------------

TITLE: Nuxt UI v3 Setup Example
DESCRIPTION: This snippet demonstrates the basic setup for Nuxt UI v3 within a Nuxt.js project. It shows how to import and use components, leveraging the Composition API.

SOURCE: https://ui4.nuxt.com/docs/components/changelog-version

LANGUAGE: vue
CODE:
```
<script setup lang=\"ts\">
const content = `\n![Nuxt UI v3](https://nuxt.com/assets/blog/nuxt-ui-v3.png)\n\nWe are thrilled to introduce Nuxt UI v3, a comprehensive redesign of our UI library that delivers significant improvements in accessibility, p`
</script>
```

--------------------------------

TITLE: Enable Corepack Installation
DESCRIPTION: This command enables Corepack, which installs the necessary Yarn and pnpm binaries to your system's PATH. It's a convenient way to start using these package managers without manual installation.

SOURCE: https://github.com/nodejs/corepack#_snippet_45

LANGUAGE: bash
CODE:
```
corepack enable

```

--------------------------------

TITLE: PNPM Commands for Project Setup
DESCRIPTION: These commands are used for managing the project dependencies and starting the development server. They are essential for contributing to or running the project locally.

SOURCE: https://github.com/nuxt-modules/mdc#_snippet_64

LANGUAGE: bash
CODE:
```
pnpm install
pnpm dev
```

--------------------------------

TITLE: Defining Props and Emits with defineProps/defineEmits in Vue
DESCRIPTION: Explains and provides examples of using the `defineProps` and `defineEmits` compiler macros within Vue's <script setup> for declaring props and events with full type inference.

SOURCE: https://vuejs.org/api/sfc-script-setup.html

LANGUAGE: vue
CODE:
```
<script setup>
const props = defineProps({
  foo: String
})

const emit = defineEmits(['change', 'delete'])
// setup code
</script>
```

--------------------------------

TITLE: Initiate Claude Code Session and Login
DESCRIPTION: These commands demonstrate how to start an interactive session with Claude Code and log in to your account. Running `claude` typically prompts for login on first use, while `/login` can be used to explicitly initiate the login process.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: shell
CODE:
```
claude
# You'll be prompted to log in on first use
```

LANGUAGE: shell
CODE:
```
/login
# Follow the prompts to log in with your account
```

--------------------------------

TITLE: Manual Setup for Nuxt Icon Module
DESCRIPTION: Provides instructions for manually installing and configuring the Nuxt Icon module. This involves installing the package via npm and updating the Nuxt configuration file.

SOURCE: https://github.com/nuxt/icon#_snippet_2

LANGUAGE: shell
CODE:
```
npm i -D @nuxt/icon
```

LANGUAGE: typescript
CODE:
```
export default defineNuxtConfig({
 modules: [
 '@nuxt/icon'
 ]
})
```

--------------------------------

TITLE: Claude CLI Commands Reference
DESCRIPTION: This snippet details common commands for interacting with the Claude CLI. It covers continuing conversations, resuming previous ones, creating Git commits, clearing conversation history, and accessing help. Each command is paired with its description and usage example.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: text
CODE:
```
claude -c
Continue most recent conversation
```

LANGUAGE: text
CODE:
```
claude -r
Resume a previous conversation
```

LANGUAGE: text
CODE:
```
claude commit
Create a Git commit
```

LANGUAGE: text
CODE:
```
/clear
Clear conversation history
```

LANGUAGE: text
CODE:
```
/help
Show available commands
```

LANGUAGE: text
CODE:
```
exit or Ctrl+C
Exit Claude Code
```

--------------------------------

TITLE: Prompt Tools - Improve Prompt
DESCRIPTION: This endpoint allows you to create a new and improved prompt guided by feedback, enhancing prompt quality and effectiveness.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: APIDOC
CODE:
```
## POST /v1/experimental/improve_prompt

### Description
Create a new-and-improved prompt guided by feedback.

### Method
POST

### Endpoint
/v1/experimental/improve_prompt
```

--------------------------------

TITLE: Development Setup for Nuxt Fonts
DESCRIPTION: Steps to set up the development environment for contributing to the Nuxt Fonts project, including enabling Corepack, installing dependencies, and running the playground.

SOURCE: https://github.com/nuxt/fonts#_snippet_3

LANGUAGE: bash
CODE:
```
corepack enable
pnpm install
pnpm dev:prepare
pnpm dev
```

--------------------------------

TITLE: Basic Script Setup Usage in Vue
DESCRIPTION: Demonstrates the basic opt-in for the `<script setup>` syntax in a Vue Single-File Component (SFC). Code inside this block executes on each component instance creation.

SOURCE: https://vuejs.org/api/sfc-script-setup.html

LANGUAGE: vue
CODE:
```
<script setup>
console.log('hello script setup')
</script>
```

--------------------------------

TITLE: Get File Metadata
DESCRIPTION: Retrieves metadata for a specific file.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: openapi
CODE:
```
GET /v1/files/{file_id}
```

--------------------------------

TITLE: Prompts for Bug Fixing and Feature Implementation
DESCRIPTION: These examples illustrate how to use Claude Code for debugging and implementing new features. Users can describe desired functionality or existing issues in natural language, and Claude will locate relevant code, suggest solutions, and potentially run tests.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: text
CODE:
```
> add input validation to the user registration form
```

LANGUAGE: text
CODE:
```
> there's a bug where users can submit empty forms - fix it
```

--------------------------------

TITLE: Refactor Authentication Module to Async/Await
DESCRIPTION: Demonstrates refactoring the authentication module to use async/await instead of callbacks. This snippet is for text-based interaction, guiding an LLM to perform the refactoring.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: text
CODE:
```
> refactor the authentication module to use async/await instead of callbacks
```

--------------------------------

TITLE: Get Organization Info
DESCRIPTION: Retrieves information about the current organization.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: openapi
CODE:
```
get /v1/organizations/me
```

--------------------------------

TITLE: Workspace Management API
DESCRIPTION: APIs for managing workspaces within an organization, including getting, listing, updating, creating, and archiving workspaces.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: APIDOC
CODE:
```
## GET /v1/organizations/workspaces/{workspace_id}

### Description
Retrieves details of a specific workspace.

### Method
GET

### Endpoint
/v1/organizations/workspaces/{workspace_id}

### Parameters
#### Path Parameters
- **workspace_id** (string) - Required - The unique identifier of the workspace.

### Response
#### Success Response (200)
- **workspace** (object) - An object containing workspace details.
  - **workspace_id** (string) - The unique identifier for the workspace.
  - **name** (string) - The name of the workspace.
  - **created_at** (string) - The timestamp when the workspace was created.

#### Response Example
```json
{
  "workspace": {
    "workspace_id": "ws_123",
    "name": "Development Workspace",
    "created_at": "2023-10-27T10:00:00Z"
  }
}
```
```

LANGUAGE: APIDOC
CODE:
```
## GET /v1/organizations/workspaces

### Description
Retrieves a list of all workspaces within the organization.

### Method
GET

### Endpoint
/v1/organizations/workspaces

### Response
#### Success Response (200)
- **workspaces** (array) - A list of workspace objects.
  - **workspace_id** (string) - The unique identifier for the workspace.
  - **name** (string) - The name of the workspace.
  - **created_at** (string) - The timestamp when the workspace was created.

#### Response Example
```json
{
  "workspaces": [
    {
      "workspace_id": "ws_123",
      "name": "Development Workspace",
      "created_at": "2023-10-27T10:00:00Z"
    },
    {
      "workspace_id": "ws_456",
      "name": "Staging Workspace",
      "created_at": "2023-10-27T11:00:00Z"
    }
  ]
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /v1/organizations/workspaces/{workspace_id}

### Description
Updates an existing workspace.

### Method
POST

### Endpoint
/v1/organizations/workspaces/{workspace_id}

### Parameters
#### Path Parameters
- **workspace_id** (string) - Required - The unique identifier of the workspace to update.

#### Request Body
- **name** (string) - Optional - The new name for the workspace.

### Request Example
```json
{
  "name": "Updated Development Workspace"
}
```

### Response
#### Success Response (200)
- **message** (string) - A confirmation message.

#### Response Example
```json
{
  "message": "Workspace updated successfully."
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /v1/organizations/workspaces

### Description
Creates a new workspace within the organization.

### Method
POST

### Endpoint
/v1/organizations/workspaces

### Parameters
#### Request Body
- **name** (string) - Required - The name for the new workspace.

### Request Example
```json
{
  "name": "New Project Workspace"
}
```

### Response
#### Success Response (200)
- **workspace_id** (string) - The unique identifier of the newly created workspace.
- **message** (string) - A confirmation message.

#### Response Example
```json
{
  "workspace_id": "ws_789",
  "message": "Workspace created successfully."
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /v1/organizations/workspaces/{workspace_id}/archive

### Description
Archives a workspace.

### Method
POST

### Endpoint
/v1/organizations/workspaces/{workspace_id}/archive

### Parameters
#### Path Parameters
- **workspace_id** (string) - Required - The unique identifier of the workspace to archive.

### Response
#### Success Response (200)
- **message** (string) - A confirmation message.

#### Response Example
```json
{
  "message": "Workspace archived successfully."
}
```
```

--------------------------------

TITLE: Configure LLM Chat and Search UI Components
DESCRIPTION: Sets up AI chat and search functionalities using the Inkeep SDK. It defines settings for the AI assistant, including avatar, help options, example questions, and search tab configurations.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: javascript
CODE:
```
const breadcrumbs = config.getBreadcrumbs(source.breadcrumbs)
const existingTabs = source.tabs ?? []

// Check if tab already exists
const tabExists = existingTabs.some((existingTab) =>
  typeof existingTab === 'string'
    ? existingTab === config.tab
    : Array.isArray(existingTab) && existingTab[0] === config.tab,
)

const tabs = tabExists
  ? existingTabs
  : [
    ...existingTabs,
    [
      config.tab,
      { breadcrumbs: breadcrumbs[0] === config.tab ? breadcrumbs.slice(1) : breadcrumbs },
    ],
  ]

return {
  ...source,
  breadcrumbs,
  tabs,
  icon: { builtIn: config.icon },
}

const aiChatSettings = {
  chatSubjectName: 'Claude',
  aiAssistantAvatar: {
    light:
      'https://storage.googleapis.com/organization-image-assets/anthropic-botAvatarSrcUrl-1757620470238.svg',
    dark: 'https://storage.googleapis.com/organization-image-assets/anthropic-botAvatarDarkSrcUrl-1757620469557.svg',
  },
  getHelpOptions: [
    {
      name: 'Support Center',
      icon: {
        builtIn: 'IoHelpBuoyOutline',
      },
      action: {
        type: 'open_link',
        url: 'https://support.claude.com/en/',
      },
    },
    {
      name: 'Github',
      icon: {
        builtIn: 'FaGithub',
      },
      action: {
        type: 'open_link',
        url: 'https://github.com/anthropics',
      },
    },
  ],
  exampleQuestions: [
    'How do I create structured JSON output?',
    'For few shot prompting, how do I pick examples?',
    "How can I prompt Claude to reply a user's language?",
  ],
}

const searchSettings = {
  tabs: [
    ['Docs', { isAlwaysVisible: true }],
    ['All', { isAlwaysVisible: true }],
    'Support',
    'Home',
    'GitHub',
  ],
}

const settings = {
  baseSettings,
  aiChatSettings,
  searchSettings,
  askAILabel: 'Ask Docs',
  askAICardLabel: 'Ask about',
  label: 'Ask Docs',
}

// Initialize the UI components
Inkeep.ModalSearchAndChat(settings); // Search Bar
Inkeep.ChatButton(settings); // 'Ask AI' button

```

--------------------------------

TITLE: API Keys API
DESCRIPTION: APIs for managing API keys within the organization, including getting, listing, and updating keys.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: APIDOC
CODE:
```
## GET /v1/organizations/api_keys/{api_key_id}

### Description
Retrieves details of a specific API key.

### Method
GET

### Endpoint
/v1/organizations/api_keys/{api_key_id}

### Parameters
#### Path Parameters
- **api_key_id** (string) - Required - The unique identifier of the API key.

### Response
#### Success Response (200)
- **api_key** (object) - An object containing API key details.
  - **api_key_id** (string) - The unique identifier for the API key.
  - **key** (string) - The API key itself (masked for security).
  - **created_at** (string) - The timestamp when the API key was created.
  - **last_used_at** (string) - The timestamp when the API key was last used.

#### Response Example
```json
{
  "api_key": {
    "api_key_id": "ak_123",
    "key": "sk-********xyz",
    "created_at": "2023-10-27T10:00:00Z",
    "last_used_at": "2023-10-27T11:00:00Z"
  }
}
```
```

LANGUAGE: APIDOC
CODE:
```
## GET /v1/organizations/api_keys

### Description
Retrieves a list of all API keys for the organization.

### Method
GET

### Endpoint
/v1/organizations/api_keys

### Response
#### Success Response (200)
- **api_keys** (array) - A list of API key objects.
  - **api_key_id** (string) - The unique identifier for the API key.
  - **key** (string) - The API key itself (masked for security).
  - **created_at** (string) - The timestamp when the API key was created.
  - **last_used_at** (string) - The timestamp when the API key was last used.

#### Response Example
```json
{
  "api_keys": [
    {
      "api_key_id": "ak_123",
      "key": "sk-********xyz",
      "created_at": "2023-10-27T10:00:00Z",
      "last_used_at": "2023-10-27T11:00:00Z"
    },
    {
      "api_key_id": "ak_456",
      "key": "sk-********abc",
      "created_at": "2023-10-27T12:00:00Z",
      "last_used_at": null
    }
  ]
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /v1/organizations/api_keys/{api_key_id}

### Description
Updates an existing API key. This might involve actions like revoking or regenerating the key depending on the implementation.

### Method
POST

### Endpoint
/v1/organizations/api_keys/{api_key_id}

### Parameters
#### Path Parameters
- **api_key_id** (string) - Required - The unique identifier of the API key to update.

#### Request Body
- **action** (string) - Required - The action to perform on the API key (e.g., "revoke", "regenerate").

### Request Example
```json
{
  "action": "revoke"
}
```

### Response
#### Success Response (200)
- **message** (string) - A confirmation message.

#### Response Example
```json
{
  "message": "API key updated successfully."
}
```
```

--------------------------------

TITLE: Start Interactive Claude Session
DESCRIPTION: Initiates an interactive mode with Claude, allowing for a conversational workflow. This is useful for ongoing development assistance and brainstorming.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: bash
CODE:
```
claude
```

--------------------------------

TITLE: GET /v1/models/{model_id}
DESCRIPTION: Get a specific model's details. This endpoint allows you to retrieve information about a particular model, including its capabilities and parameters.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: APIDOC
CODE:
```
## GET /v1/models/{model_id}

### Description
Get a specific model's details. This endpoint allows you to retrieve information about a particular model, including its capabilities and parameters.

### Method
GET

### Endpoint
/v1/models/{model_id}

### Parameters
#### Path Parameters
- **model_id** (string) - Required - The ID of the model to retrieve.

#### Query Parameters
None

#### Request Body
None

### Request Example
```
GET /v1/models/claude-3-opus-20240229
```

### Response
#### Success Response (200)
- **id** (string) - The ID of the model.
- **type** (string) - The type of the model.
- **name** (string) - The name of the model.
- **model_family** (string) - The family of the model.
- **version** (string) - The version of the model.
- **status** (string) - The status of the model.
- **created_at** (string) - The creation date of the model.
- **max_tokens** (integer) - The maximum number of tokens the model can process.
- **languages** (array) - The languages supported by the model.
- **description** (string) - A description of the model.

#### Response Example
```json
{
  "id": "claude-3-opus-20240229",
  "type": "model",
  "name": "Claude 3 Opus",
  "model_family": "claude-3",
  "version": "20240229",
  "status": "available",
  "created_at": "2024-02-29T12:00:00Z",
  "max_tokens": 200000,
  "languages": ["en", "es", "fr", "de", "it", "pt", "nl", "zh", "ja", "ko"],
  "description": "The most powerful model, capable of complex reasoning and analysis."
}
```
```

--------------------------------

TITLE: Getting Started with TanStack Table
DESCRIPTION: Guides for getting started with TanStack Table, including installation and migration steps.

SOURCE: https://tanstack.com/table/latest/docs/framework/vue/vue-table

LANGUAGE: APIDOC
CODE:
```
## Installation

### Description
Instructions on how to install TanStack Table and its dependencies.

### Endpoint
N/A (Installation Guide)

### Parameters
N/A

### Request Example
N/A

### Response
N/A
```

LANGUAGE: APIDOC
CODE:
```
## Migrating to V8

### Description
A guide to help users migrate their existing TanStack Table projects to version 8.

### Endpoint
N/A (Migration Guide)

### Parameters
N/A

### Request Example
N/A

### Response
N/A
```

--------------------------------

TITLE: Organization Invites API
DESCRIPTION: Endpoints for managing invitations to join the organization, including getting, listing, creating, and deleting invites.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: APIDOC
CODE:
```
## GET /v1/organizations/invites/{invite_id}

### Description
Retrieves details of a specific organization invite.

### Method
GET

### Endpoint
/v1/organizations/invites/{invite_id}

### Parameters
#### Path Parameters
- **invite_id** (string) - Required - The unique identifier of the invite.

### Response
#### Success Response (200)
- **invite** (object) - An object containing invite details.
  - **invite_id** (string) - The unique identifier for the invite.
  - **email** (string) - The email address the invite was sent to.
  - **status** (string) - The current status of the invite (e.g., "pending", "accepted").

#### Response Example
```json
{
  "invite": {
    "invite_id": "invite_xyz789",
    "email": "test@example.com",
    "status": "pending"
  }
}
```
```

LANGUAGE: APIDOC
CODE:
```
## GET /v1/organizations/invites

### Description
Retrieves a list of all organization invites.

### Method
GET

### Endpoint
/v1/organizations/invites

### Response
#### Success Response (200)
- **invites** (array) - A list of invite objects.
  - **invite_id** (string) - The unique identifier for the invite.
  - **email** (string) - The email address the invite was sent to.
  - **status** (string) - The current status of the invite.

#### Response Example
```json
{
  "invites": [
    {
      "invite_id": "invite_xyz789",
      "email": "test@example.com",
      "status": "pending"
    },
    {
      "invite_id": "invite_uvw456",
      "email": "another@example.com",
      "status": "accepted"
    }
  ]
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /v1/organizations/invites

### Description
Creates a new invitation for a user to join the organization.

### Method
POST

### Endpoint
/v1/organizations/invites

### Parameters
#### Request Body
- **email** (string) - Required - The email address of the user to invite.
- **role** (string) - Optional - The role to assign to the invited user.

### Request Example
```json
{
  "email": "new.user@example.com",
  "role": "member"
}
```

### Response
#### Success Response (200)
- **invite_id** (string) - The unique identifier of the newly created invite.
- **message** (string) - A confirmation message.

#### Response Example
```json
{
  "invite_id": "invite_def123",
  "message": "Invitation created successfully."
}
```
```

LANGUAGE: APIDOC
CODE:
```
## DELETE /v1/organizations/invites/{invite_id}

### Description
Deletes an existing organization invite.

### Method
DELETE

### Endpoint
/v1/organizations/invites/{invite_id}

### Parameters
#### Path Parameters
- **invite_id** (string) - Required - The unique identifier of the invite to delete.

### Response
#### Success Response (200)
- **message** (string) - A confirmation message indicating the invite was deleted.

#### Response Example
```json
{
  "message": "Invite deleted successfully."
}
```
```

--------------------------------

TITLE: Get User
DESCRIPTION: Retrieves information for a specific user within an organization.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: openapi
CODE:
```
get /v1/organizations/users/{user_id}
```